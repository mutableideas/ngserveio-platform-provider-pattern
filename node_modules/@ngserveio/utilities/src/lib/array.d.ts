import { PropertyOrFunc, StringOrNumber } from './types';
export type SortType = 'desc' | 'asc' | null | undefined;
export declare function groupBy<T>(value: Array<T>, propName: PropertyOrFunc<T, string>): {
    key: string;
    value: T[];
}[];
export declare function sortBy<T>(value: Array<T>, propName?: PropertyOrFunc<T, StringOrNumber>, order?: SortType): T[];
export declare function toDictionary<T>(objects: T[], propName: PropertyOrFunc<T, StringOrNumber>): Record<string, T>;
export declare function chunkMap<T, R>(items: T[], chunkSize?: number, mapFunc?: (item: T[], index: number) => R[]): Array<R[]>;
export declare function chunkAsync<T>(items: T[], chunkSize: number, func: (item: T[]) => Promise<void>): Promise<void>;
export declare function distinct<T extends StringOrNumber>(values: T[]): T[];
